{"version":3,"sources":["components/Box.js","components/Popular.js","components/Search.js","components/Results.js","components/SearchApp.js","components/Selected.js","App.js","serviceWorker.js","index.js"],"names":["Box","box","path","window","location","pathname","split","className","alt","src","poster_path","popularity","overview","name","title","to","id","vote_average","Popular","props","state","data","handleChanges","bind","this","_isMounted","fetch","then","response","json","setState","prevState","results","slice","map","key","Component","Search","handleInput","type","placeholder","onChange","Results","result","SearchApp","useState","getContent","quest","e","axios","target","value","length","Selected","selected","match","infos","App","exact","component","from","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d6d94f6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { Link } from \"react-router-dom\"\r\n\r\nfunction Box({ box }) {\r\n    let path = window.location.pathname.split(\"/\")\r\n    return (\r\n        <div className=\"box\" >\r\n            <img className=\"popularPic\" alt=\"box\" src={box.poster_path ? \"http://image.tmdb.org/t/p/w185/\" + box.poster_path : \"https://previews.123rf.com/images/pavelstasevich/pavelstasevich1902/pavelstasevich190200120/124934975-no-image-available-icon-vector-flat.jpg\"} popularity={box.popularity} overview={box.overview} />\r\n            <div className=\"contentBox\">\r\n                <h3 className=\"popularTitle\" >{box.name ? box.name : box.title}</h3>\r\n                <hr className=\"break\" />\r\n                <Link to={`/details/${path[1]}/${box.id}`} className=\"details\" >Details </Link>\r\n                <div className=\"round\">{box.vote_average}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box                                                                          ","import React, { Component } from 'react';\r\nimport Box from './Box';\r\n\r\nconst API = 'https://api.themoviedb.org/3';\r\nconst DEFAULT_QUERY = '?api_key=347e5fe5f85757e218ff7a8184236af6';\r\n\r\nclass Popular extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [],\r\n        }\r\n        this.handleChanges = this.handleChanges.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        if (this._isMounted) {\r\n            this.handleChanges()\r\n        }\r\n\r\n    }\r\n\r\n    handleChanges() {\r\n        fetch(API + this.props.location.pathname + DEFAULT_QUERY)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState(prevState => {\r\n                    return { ...prevState, data: data.results }\r\n                })\r\n            });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state;\r\n        // console.log(\"ojsaaa!#\", data)\r\n        return (\r\n            <div>\r\n                <ul>\r\n\r\n                    {data.slice(0, 10).map(box =>\r\n                        <Box box={box} key={box.id} />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Popular;\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nfunction Search({ handleInput }) {\r\n    return (\r\n        <section className=\"searchbox-wrap\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search for favourite...\"\r\n                className=\"searchbox\"\r\n                onChange={handleInput}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\n\r\nimport Box from './Box'\r\n\r\nfunction Results({ results }) {\r\n    return (\r\n        <section className=\"results\">\r\n            {results.map(result => (\r\n                < Box className=\"result-box\" key={result.id} box={result} >Result:</ Box>\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Results","import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport Search from './Search'\r\nimport Results from './Results'\r\n\r\n\r\nconst API = 'https://api.themoviedb.org/3/search/'\r\nconst DEFAULT_QUERY = '&api_key=347e5fe5f85757e218ff7a8184236af6'\r\n\r\n\r\nfunction SearchApp(type) {\r\n    const [state, setState] = useState({\r\n        results: []\r\n    })\r\n\r\n    const handleInput = (e) => {\r\n        let path = window.location.pathname.split(\"/\")\r\n        let quest = path[1]\r\n        //if (type.location.pathname === \"/movie/popular\") {\r\n        //    quest = \"movie\"\r\n        //  }\r\n        //  else if (type.location.pathname === \"/tv/popular\") {\r\n        //     quest = \"tv\"\r\n        // }\r\n        // console.log(quest, type.location.pathname)\r\n        // console.log(\"history\", browserHistory.listen)\r\n        if (e.target.value.length >= 3) {\r\n            getContent(quest, e)\r\n        } else if (e.target.value.length === 0) {\r\n            setState({ results: [] })\r\n        }\r\n    }\r\n\r\n    const getContent = (quest, e) => {\r\n        if (quest === \"tv\" || quest === \"movie\") {\r\n            axios(API + quest + \"?query=\" + e.target.value + DEFAULT_QUERY).then(({ data }) => {\r\n                let results = data.results\r\n                setState(prevState => {\r\n                    return { ...prevState, results: results }\r\n                })\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <main>\r\n                <Search handleInput={handleInput} />\r\n            </main>\r\n            <Results results={state.results} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchApp","import React, { Component } from 'react'\r\n\r\n\r\nconst API = 'https://api.themoviedb.org/3/';\r\nconst DEFAULT_QUERY = '?api_key=347e5fe5f85757e218ff7a8184236af6';\r\n\r\n\r\nclass Selected extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: {}\r\n        }\r\n        this.selected = this.selected.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        let path = window.location.pathname.split(\"/\")\r\n        if (path[3])\r\n            this.selected(path[2] + '/' + path[3])\r\n    }\r\n\r\n    selected(match) {\r\n        fetch(API + match + DEFAULT_QUERY)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ data: data })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const infos = this.state.data;\r\n        return (\r\n            <div>\r\n                <div className='details-main' >\r\n                    <div >\r\n                        <img className=\"detail-image\" alt=\"box\" src={\"http://image.tmdb.org/t/p/w185/\" + infos.poster_path} />\r\n                    </div>\r\n                    <div className=\"header-detail\">\r\n\r\n                        <h1>{infos.name ? infos.name : infos.title}</h1>\r\n                    </div>\r\n                    <div className=\"detail-info\">\r\n\r\n                        <h2> {infos.overview}</h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Selected;\r\n\r\n\r\n\r\n\r\n\r\n","\nimport React, { Component } from 'react';\nimport Popular from './components/Popular';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n} from \"react-router-dom\";\n\nimport SearchApp from './components/SearchApp'\nimport { Redirect } from 'react-router'\nimport Selected from './components/Selected'\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <Router >\n        <div>\n          <button className=\"fetch-button\" >\n            <Link to=\"/movie/popular\" className=\"fetch-button\">Movies</Link>\n          </button>\n          <button className=\"fetch-button\"  >\n            <Link to=\"/tv/popular\" className=\"fetch-button\">Tv shows</Link>\n          </button>\n\n          <Switch>\n\n            <Route exact path=\"/details/movie/:id\" component={Selected} />\n            <Route exact path=\"/details/tv/:id\" component={Selected} />\n            <Route path=\"/:id\" component={SearchApp} />\n          </Switch>\n\n          <Redirect exact from=\"/\" to=\"/tv/popular\" />\n          <Route exact path=\"/movie/popular\" component={Popular} title=\"Poplar Movies\" />\n          <Route exact path=\"/tv/popular\" component={Popular} title=\"Popular Series\" />\n\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}